/**
 * Created by Denny on 16.04.2015.
 */
Messenger.options = {
    extraClasses: 'messenger-fixed messenger-on-top messenger-on-right',
    theme: 'block'
};

function getCommand(line) {
    var split = line.split(" ");
    var result = {
        command: split[0],
        value: split[1]
    };
    switch (result.command) {
        case "push":
            result.value = parseInt(result.value, 10);
            break;
        case "slide":
            result.value = [parseInt(split[1], 10), parseInt(split[2], 10)];
            break;
        default:
            break;
    }
    return result;
}

function initTooltips() {
    //init tooltips
    $('[data-toggle="tooltip"]').tooltip({
        container: 'body'
    });
    $('[data-tooltip="tooltip"]').tooltip({
        container: 'body'
    });
}

function StackMachineModel() {
    var self = this;

    //visibility of wells
    self.taskDescVisible = ko.observable(false);
    self.btnDescVisible = ko.observable(true);
    self.commandDescVisible = ko.observable(false);

    //task management
    function loadTasks() {
        Messenger().ajax({
            errorMessage: "Laden der Aufgaben fehlgeschlagen"
        }, {
            // sending a JSON encoded body
            contentType: "application/json",
            // don't process the body, we'll render data into a valid string
            processData: false,
            url: "@{StackMachineTasksR}?public=true",
            type: "GET",
            success: function (data) {
                data.tasks.sort(sort_by("name", true));
                self.tasks(data.tasks);
            },
            // this only refers to the data type of the *returned* data
            dataType: "json"
        });
    }

    loadTasks();
    self.tasks = ko.observableArray([]);
    self.selectedTask = ko.observable();
    self.loadTask = function () {
        Messenger().ajax({
            errorMessage: "Laden der Aufgabe fehlgeschlagen",
            id: "loadTask"
        }, {
            // sending a JSON encoded body
            contentType: "application/json",
            // don't process the body, we'll render data into a valid string
            processData: false,
            url: "@{StackMachineTasksR}/" + self.selectedTask(),
            type: "GET",
            success: function (data) {
                self.backupStack = data.task.initialStack;
                self.targetStack(data.task.targetStack);
                data.task.desc = data.task.desc.replace(/\n/g, "");
                self.task(data.task);

                self.taskDescVisible(true);
                self.btnDescVisible(false);

                self.resetProgram();
            },
            // this only refers to the data type of the *returned* data
            dataType: "json"
        });
    };
    self.purgeTask = function() {
        self.backupStack = [];
        self.targetStack([]);
        self.task(undefined);

        self.taskDescVisible(false);
        self.btnDescVisible(false);

        self.resetProgram();
    };
    self.task = ko.observable("");

    //editor settings
    self.editor = ace.edit("editor");
    self.editor.setTheme("ace/theme/tomorrow");
    self.editor.getSession().setMode("ace/mode/stackMachine");
    self.editor.on("change", function (e) {
        self.invalidated(true);
    });

    //program values
    self.programCounter = ko.observable(0);
    self.program = ko.observableArray([]);
    self.backupStack = [];
    self.stack = ko.observableArray([]);
    self.targetStack = ko.observableArray([]);
    self.stackHistory = [{stack: self.backupStack, programCounter: 0}];
    self.invalidated = ko.observable(true);

    function highlightLine(programCounter) {
        //get whole program
        var lines = self.editor.getSession().getDocument().getAllLines();
        var i = 0;
        while (i !== programCounter + 1) {
            var line = lines[i];
            var newLine = /^\s*$/;
            var comment = /^#.*$/;
            var breakpoint = /^break$/;
            if (newLine.test(line) || comment.test(line)) {
                programCounter++;
            }
            i++
        }
        self.editor.gotoLine(i);
    }

    //API actions
    function update() {
        //get whole program
        self.program(parseProgram(false));

    }

    function parseProgram() {
        var program = [];
        var lines = self.editor.getSession().getDocument().getAllLines();
        lines.forEach(function (line, i) {
            var newLine = /^\s*$/;
            var comment = /^#.*$/;
            var breakpoint = /^break$/;
            if (!newLine.test(line) && !comment.test(line)) {
                program.push(getCommand(line));
            }
        });
        return program;
    }

    self.reset = function () {
        self.editor.selectAll();
        self.editor.removeLines();
        self.programCounter(0);
        self.stackHistory = [];
        self.editor.gotoLine(0);
    };
    self.resetProgram = function () {
        self.stack(self.backupStack);
        self.stackHistory = [];
        self.programCounter(0);
        highlightLine(0);
        update();
        self.invalidated(false);
    };

    self.undoCommand = function () {
        var data = self.stackHistory.pop();
        self.programCounter(self.stackHistory.length == 0 ? 0 : data.programCounter);
        highlightLine(self.stackHistory.length == 0 ? 0 : self.programCounter());
        self.stack(self.stackHistory.length == 0 ? self.backupStack : data.stack);
    };

    self.running = ko.observable(false);
    self.executeCommand = function () {
        if (self.invalidated()) {
            self.resetProgram();
        }
        self.running(true);
        self.stackHistory.push({stack: self.stack(), programCounter: self.programCounter()});
        Messenger().ajax({
                errorMessage: "Fehlerhafter Code",
                id: "executeCommand",
                retry: false
            },
            {
                // sending a JSON encoded body
                contentType: "application/json",
                // don't process the body, we'll render data into a valid string
                processData: false,
                url: "@{StackMachineR}",
                type: "POST",
                // notice the usage of stringify here
                data: JSON.stringify({
                    stack: self.stack(),
                    program: self.program(),
                    programCounter: self.programCounter(),
                    all: false
                }),
                success: function (data) {
                    self.stack(data.stack);
                    self.programCounter(data.programCounter);
                    //highlight current line
                    highlightLine(data.programCounter);
                },
                error: function (data) {
                    self.editor.gotoLine(self.programCounter() + 1);
                    return data.responseJSON.error;
                },
                // this only refers to the data type of the *returned* data
                dataType: "json",
                complete: function() {
                    self.running(false);
                }
            });
    };
    self.executeProgram = function () {
        if (self.invalidated()) {
            self.resetProgram();
        }
        self.running(true);
        self.stackHistory.push({stack: self.stack(), programCounter: self.programCounter()});
        Messenger().ajax({
            errorMessage: "Fehlerhafter Code",
            id: "executeProgram",
            retry: false
        }, {
            // sending a JSON encoded body
            contentType: "application/json",
            // don't process the body, we'll render data into a valid string
            processData: false,
            url: "@{StackMachineR}",
            type: "POST",
            // notice the usage of stringify here
            data: JSON.stringify({
                stack: self.stack(),
                program: self.program(),
                programCounter: self.programCounter(),
                all: true
            }),
            success: function (data) {
                self.stack(data.stack);
                self.programCounter(data.programCounter);
                //highlight current line
                highlightLine(data.programCounter);
            },
            error: function (data) {
                return data.responseJSON.error;
            },
            // this only refers to the data type of the *returned* data
            dataType: "json",
            complete: function() {
                self.running(false);
            }
        });
    };
    self.validateProgram = function () {
        update();
        self.executeProgram();
        self.running(true);
        Messenger().ajax({
            successMessage: "Aufgabe gel√∂st",
            id: "validateProgram",
            retry: false
        }, {
            // sending a JSON encoded body
            contentType: "application/json",
            // don't process the body, we'll render data into a valid string
            processData: false,
            url: "@{StackMachineTasksR}/" + self.selectedTask(),
            type: "POST",
            // notice the usage of stringify here
            data: JSON.stringify({
                program: self.program()
            }),
            success: function (data) {
                return data;
            },
            error: function (data) {
                return data.responseText;
            },
            complete: function() {
                self.running(false);
            }
        });
    };

    self.disableContinue = ko.computed(function () {
        return self.program().length <= self.programCounter() && !self.invalidated();
    });

    //file management
    self.fileName = ko.observable("");
    self.saveScript = function () {
        var csv = "";
        var lines = self.editor.getSession().getDocument().getAllLines();
        lines.forEach(function (line, i) {
            if (i == lines.length - 1) {
                csv += line
            }
            else {
                csv += line + ";"
            }
        });
        var blob = new Blob([csv], {type: "text/csv"});
        saveAs(blob, self.fileName() + ".script");
        $('#saveFileModal').modal('hide')
    };
    self.loadScript = function () {
        document.getElementById('loadScript').click();
    };

    //load file
    function handleFileSelect(evt) {
        var files = evt.target.files; // FileList object

        for (var i = 0, f; f = files[i]; i++) {

            // Only process script files.
            if (!/.*\.script$/.test("stackMachine.script")) {
                continue;
            }

            var reader = new FileReader();

            reader.onload = (function (theFile) {
                return function (e) {
                    self.reset();
                    self.editor.getSession().getDocument().insertLines(0, e.target.result.split(";"));
                };
            })(f);

            reader.readAsText(f);
        }
    }
    document.getElementById('loadScript').addEventListener('change', handleFileSelect, false);

    //rating management
    self.helpful = "5";
    self.understandable = "5";
    self.bugs = "";
    self.improvements = "";
    self.liked = "";
    self.saveRating = function() {
        Messenger().ajax({
            errorMessage: "Speichern fehlgeschlagen. Bitte noch einmal versuchen"
        }, {
            url: "@{StackMachineRatingsR}",
            type: "POST",
            processData: false,
            contentType: "application/json",
            data: JSON.stringify({
                helpful: JSON.parse(self.helpful),
                understandable: JSON.parse(self.understandable),
                bugs: self.bugs,
                improvements: self.improvements,
                liked: self.liked
            }),
            success: function () {
                $("#ratingModal").modal("hide");
            },
            error: function() {
            }
        });
    }
}

var debug = new StackMachineModel();
$(document).ready(function () {
    ko.applyBindings(debug, document.getElementById("main"));
    initTooltips();

    $("#main").fadeIn();
});